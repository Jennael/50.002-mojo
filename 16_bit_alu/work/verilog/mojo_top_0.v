/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [15:0] M_ctr_a_d, M_ctr_a_q = 1'h0;
  reg [15:0] M_ctr_b_d, M_ctr_b_q = 1'h0;
  localparam START_state = 3'd0;
  localparam ST_A_state = 3'd1;
  localparam ST_B_state = 3'd2;
  localparam SHOW_A_state = 3'd3;
  localparam SHOW_B_state = 3'd4;
  localparam OUT_state = 3'd5;
  
  reg [2:0] M_state_d, M_state_q = START_state;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  reg [5:0] alufn;
  
  reg [15:0] alu;
  
  localparam X = 5'h1d;
  
  wire [16-1:0] M_alu1_alu_output;
  reg [6-1:0] M_alu1_alufn;
  reg [16-1:0] M_alu1_a;
  reg [16-1:0] M_alu1_b;
  alu_3 alu1 (
    .alufn(M_alu1_alufn),
    .a(M_alu1_a),
    .b(M_alu1_b),
    .alu_output(M_alu1_alu_output)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_ctr_a_d = M_ctr_a_q;
    M_ctr_b_d = M_ctr_b_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    alufn = io_dip[0+0+5-:6];
    M_alu1_a = M_ctr_a_q;
    M_alu1_b = M_ctr_b_q;
    M_alu1_alufn = alufn;
    alu = M_alu1_alu_output;
    io_led = {alu[8+7-:8], alu[0+7-:8], 8'h00};
    M_seg_values = 16'heeee;
    
    case (M_state_q)
      START_state: begin
        M_seg_values = 16'hdeee;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (io_button[3+0-:1] == 1'h1) begin
          M_state_d = ST_A_state;
        end else begin
          if (io_button[4+0-:1] == 1'h1) begin
            M_state_d = ST_B_state;
          end else begin
            if (io_button[1+0-:1] == 1'h1) begin
              M_state_d = OUT_state;
            end
          end
        end
      end
      ST_A_state: begin
        M_ctr_a_d[8+7-:8] = io_dip[16+7-:8];
        M_ctr_a_d[0+7-:8] = io_dip[8+7-:8];
        M_alu1_a = M_ctr_a_q;
        io_led[16+7-:8] = M_ctr_a_q[8+7-:8];
        io_led[8+7-:8] = M_ctr_a_q[0+7-:8];
        M_seg_values = 16'haeee;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (io_button[3+0-:1] == 1'h1) begin
          M_state_d = ST_A_state;
        end else begin
          if (io_button[4+0-:1] == 1'h1) begin
            M_state_d = ST_B_state;
          end else begin
            if (io_button[1+0-:1] == 1'h1) begin
              M_state_d = OUT_state;
            end
          end
        end
      end
      ST_B_state: begin
        M_ctr_b_d[8+7-:8] = io_dip[16+7-:8];
        M_ctr_b_d[0+7-:8] = io_dip[8+7-:8];
        io_led[16+7-:8] = M_ctr_b_q[8+7-:8];
        io_led[8+7-:8] = M_ctr_b_q[0+7-:8];
        M_seg_values = 16'hbeee;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (io_button[3+0-:1] == 1'h1) begin
          M_state_d = ST_A_state;
        end else begin
          if (io_button[4+0-:1] == 1'h1) begin
            M_state_d = ST_B_state;
          end else begin
            if (io_button[1+0-:1] == 1'h1) begin
              M_state_d = OUT_state;
            end
          end
        end
      end
      OUT_state: begin
        io_led[16+7-:8] = alu[8+7-:8];
        io_led[8+7-:8] = alu[0+7-:8];
        M_seg_values = 16'hceee;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (io_button[3+0-:1] == 1'h1) begin
          M_state_d = ST_A_state;
        end else begin
          if (io_button[4+0-:1] == 1'h1) begin
            M_state_d = ST_B_state;
          end else begin
            if (io_button[1+0-:1] == 1'h1) begin
              M_state_d = OUT_state;
            end
          end
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_ctr_a_q <= 1'h0;
      M_ctr_b_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_ctr_a_q <= M_ctr_a_d;
      M_ctr_b_q <= M_ctr_b_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
