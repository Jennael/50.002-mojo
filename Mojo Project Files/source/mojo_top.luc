// simple_ram dataA(#SIZE(5), #DEPTH($pow(2,phrase_count.WIDTH)));    //initialise simple_ram for enc input
// simple_ram dataB(#SIZE(5), #DEPTH($pow(2,phrase_count.WIDTH)));    //initialise simple_ram for dec input

//ask how to connect modules
//ask when to putinto mojo top and when to put in own module

module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    
    output seven_seg[7],    // individual segments in each seven_seg
    output seg_sel[6],      // to select between different seven_seg
    input button[5],        // button for level control and to start the game
    output red_led[2],         // to display morse code
    output enter_led[2],    // to indicate which player to enter
    output guess_led[2],     // to indicate which player to guess
    output button_col[6],   // coloums in keypad
    input button_row[5]   // rows in keypad
    
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst){
      buttonmapping bm;
      displaymorse dm;
      
      fsm state = {STATE_IDLE, STATE_ENC, STATE_ENCDISP, STATE_DEC, STATE_COMP, STATE_SCORE};
    }
    
    .rst(~rst_n){
      
      
    }
    
    dff incr[32];         //initialise duration increment / speed
    
    dff enter_indic; //indicate which player is encoding
    dff guess_indic; //indicate which player is decoding
    
    dff phrase_countE[5]; // used to 
    dff phrase_countD[5]; //
    
    simple_ram dataE(#SIZE(5), #DEPTH($pow(2, phrase_countE.WIDTH)));
    simple_ram dataD(#SIZE(5), #DEPTH($pow(2, phrase_countD.WIDTH)));
    
  
    
    dff button_col_cycler[6];
    
    
  }
  
  always {
  
    dataE.address = phrase_countE.q;
    dataD.address = phrase_countD.q;
    
    dataE.write_data = 8hxx;
    dataE.write_en = 0;
    
    dataD.write_data = 8hxx;
    dataD.write_en = 0;
    
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    seven_seg = 7b0000000;
    seg_sel = 4b1111;
    red_led = 0;
    enter_led = 2b00;
    guess_led = 2b00;
    
    button_col = bm.button_col;
    bm.button_row = button_row;
    
    dm.data = 5h0;
    dm.incr = 32b0;
    red_led = dm.red_led;
    
    
  
    case(state.q){
      //encoder input
      state.STATE_IDLE://before start of game
        incr.d = 1;
        case(button){
          
          00001:
            incr.d = incr.q + 1;
          00010:
            if(incr.q >1){
              incr.d = incr.q - 1;
            }
          00100:
            phrase_countE.d = phrase_countE.q + 1;
            phrase_countD.d = phrase_countD.q + 1;
            
          01000:
            if(phrase_countE.q >1){
              phrase_countE.d = phrase_countE.q - 1;
              phrase_countD.d = phrase_countD.q + 1;

            }
          10000:
            dm.incr = incr.q;
            state.d = state.STATE_ENC;
        }
        
      
      state.STATE_ENC: //encoder to input code
      
        case(enter_indic.q){
          00: //new game. blue turn
            enter_led = 01;
            enter_indic.d = 1;
        
          01:// blue done. now green turn
            enter_led = 10;
          
          10://green turn done. maybe blue turn?
            enter_led = 01;
            enter_indic.d = 1;
            
          default:
            enter_led = 01;
            enter_indic.d = 1;
            
        }
        
        //cycling button_col
        if(button_col_cycler.q == 0){
          button_col_cycler.d = 1;
        }
        button_col = button_col_cycler.q; // assign cycler value to button_col
        button_col_cycler.d = button_col_cycler.q << 1; // left-shift 1 bit of button_col_cycler 
        
        if(button_row){// if button_row has input
        
          dataE.write_data = bm.somechar; // link input with encoder ram
          dataE.write_en = 1; // send input
          phrase_countE.d = phrase_countE.q + 1; // move insert pointer
          
          if(bm.somechar == 5h1d || &phrase_countE.q){ // if end or run out of space
            enter_indic.d = enter_indic.q << 1;
            state.d = state.STATE_ENCDISP; //move to next state
          
          }
        
        }
        
      state.STATE_ENCDISP: // display code
      
        if(dataE.read_data != 5h1d){
          dm.data = dataE.read_data;
          
          phrase_countE.d = phrase_countE.q + 1;
        
          }
        
        else{ //if start button is pressed
          state.d = state.STATE_DEC;
        }
      
      
      state.STATE_DEC: //decoder input guess
      
        case(guess_indic.q){
          00: //new game. blue turn
            guess_led = 01;
            guess_indic.d = 1;
        
          01:// blue done. now green turn
            guess_led = 10;
          
          10://green turn done. maybe blue turn?
            guess_led = 01;
            guess_indic.d = 1;
            
          default:
            guess_led = 01;
            guess_indic.d = 1;
            
        }
      
        if(button_col_cycler.q == 0){
          button_col_cycler.d = 1;
        }
        button_col = button_col_cycler.q;
        button_col_cycler.d = button_col_cycler.q << 1;
        
        if(button_row){// if button_row has input
        
          dataD.write_data = bm.somechar; // link input with encoder ram
          dataD.write_en = 1; // send input
          phrase_countD.d = phrase_countD.q + 1; // move insert pointer
          
          if(bm.somechar == 5h1d || &phrase_countE.q){ // if end or run out of space
            guess_indic.d = enter_indic.q << 1;
            state.d = state.STATE_COMP; //move to next state
          
          }
        
        }
      
      
      state.STATE_COMP: // compare encoded guess. MEIMEI's portion
      
        phrase_countD.d = dataD.read_data;
        
        if(button[4] == 1){ //if start button is pressed
          state.d = state.STATE_SCORE;
        }
      
      state.STATE_SCORE: //add and display score
        
        if(button[4] == 1){ //if start button is pressed
          state.d = state.STATE_ENCDISP;
        }
      
    }
    
  }
}  