module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    
    output seven_seg[7],    // individual segments in each seven_seg
    output seg_sel[6],      // to select between different seven_seg
    
    input button[5],        // button for level control and to start the game 
    
    output red_led,         // to display morse code
    output enter_led[2],    // to indicate which player to enter
    output guess_led[2],     // to indicate which player to guess
    
    output button_col[6],   // coloums in keypad
    input button_row[5]     // rows in keypad
    
    
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    simple_ram question (#SIZE(5), #DEPTH(80);//dealing with 80 characters 5 bits wide; //ram of 80 by 5
    simple_ram answer (#SIZE(5), #DEPTH(80);//dealing with 80 characters 5 bits wide   
    
    .rst(rst){
      fsm game = {INIT, QUESTION, ANSWER, CHECK, PASS, FAIL};
      fsm write = {IDLE, WRITE};        
      check check;
    }
    
    dff entry_count[$clog2(80)]; //dealing with 80 characters per input string
    
  }

  sig write_ram; //1: signal to write in ram or 0: when finished writing
    
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    
    seven_seg = 7b0000000;
    seg_sel = 4b1111;
    red_led = 0;
    enter_led = 2b11;
    guess_led = 2b11;
    button_col = 6b000000;
    
    question.address = 7b0; // use entry_count as the RAM entry address
    question.write_data = 8hxx;      // don't care
    question.write_en = 0;

    answer.address = 0; // use entry_count as the RAM entry address
    answer.write_data = 8hxx;      // don't care
    answer.write_en = 0;
      
    check.adata = 0;
    check.bdata = 0;
      
    write_ram = 0;
          
    case (game.q){
      game.INIT:


        
      game.QUESTION:
        case (write.q) {
                        
          write.IDLE:
            if (/*condition*/){                    //Condition to start writing process
              write_ram = 1;
            }  
            if(write_ram){ 
            write.d = write.WRITE;
            } 
                        
          write.WRITE:
            question.write_data = /*character*/;   // AINUL
            question.write_en = 1;             // signal we want to write
            entry_count.d = entry_count.q + 1; // increment the address
 
            // if we run out of space or they pressed enter
            if (&entry_count.q || /*character*/ == 5b11101) { //AINUL: END CHARACTER
              write.d = write.IDLE;              
              write_ram = 0;

              entry_count.d = 0; // reset entry_count
          }

        }  
        
        
      game.ANSWER:
        case (write.q) {
                        
          write.IDLE:
            if (/*condition*/){                  //Condition to start writing process
              write_ram = 1;
            }  
            if(write_ram){                     
            write.d = write.WRITE;
            } 
                        
          write.WRITE:
            answer.write_data = /*character*/;   // AINUL
            answer.write_en = 1;             // signal we want to write
            entry_count.d = entry_count.q + 1; // increment the address
 
            // if we run out of space or they pressed enter
            if (&entry_count.q || /*character*/ == 5b11101) { //AINUL: END CHARACTER
              write.d = write.IDLE;
              write_ram = 0;

              entry_count.d = 0; // reset entry_count
          }

        }      
        
      game.CHECK:
        question.write_en = 0;
        answer.write_en = 0;
          
        question.address=check.address;
        answer.address=check.address;
        
        check.adata = question.read_data;
        check.bdata = answer.read_data;
          
        //check.out gives the score
        
    }      
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  }
}