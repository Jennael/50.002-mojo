module morse_ram (
    input clk,  // clock
    input rst,  // reset
    
    input address,
    input character[5], //input character - connect decoded value here
    output characterout[5], //compare using this output
    input new_ram, //from game fsm 
    input read_ram //from game fsm
      ) {

  .clk(clk) {
  
    .rst(rst) {
    
      fsm state = {NEW, WRITE, IDLE, READ}; // new
      
    }
    
    
    simple_ram ram (#SIZE(5), #DEPTH($pow(2,80))); //dealing with 80 characters 5 bits wide
  
  }
  
  //REVIEW - need a second opinion
  always {
    
    ram.address = address; // use entry_count as the RAM entry address
    ram.write_data = 8hxx;      // don't care
    ram.write_en = 0;
    characterout = 5b0;
    
    case (state.q) { // our FSM       
      
      //finished reading, waiting for write
      state.NEW:
        entry_count.d = 0;
        if(new_ram){
          state.d=state.WRITE;
        }
      
      //finished writing, waiting for read
      state.IDLE:
        if(read_ram){
          state.d = state.READ;
        }    
      
      //inputting
      state.WRITE:
        if (new_ram) { // wait for new ram input signal
          ram.write_data = character;        // write the received letter to RAM
          ram.write_en = 1;                // signal we want to write
          entry_count.d = entry_count.q + 1; // increment the address
 
          // if we run out of space or they pressed enter
          if (&entry_count.q || character == 5b11101) { //AINUL: END CHARACTER
            state.d = state.IDLE;
            entry_count.d = 0; // reset entry_count
          }
        }
    
      //outputting
      state.READ:
        if(read_ram){
        
          entry_count.d = entry_count.q + 1;
          characterout = ram.read_data; 
          
          if (&entry_count.q || ram.read_data == 5b11101){
            state.d = state.NEW;
            entry_count.d = 0; // reset entry_count
          }
        } 
    
    
  }
}

