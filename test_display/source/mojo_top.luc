module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full

    
    input button[5],        // button for level control and to start the game 
    
    output red_led,         // to display morse code
    output enter_led[2],    // to indicate which player to enter
    output guess_led[2],     // to indicate which player to guess
    
    output button_col[6],   // coloums in keypad
    input button_row[5],     // rows in keypad

    output gnd,
    output pwr     
    
    
    
    
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;

    // RAMs
    //simple_ram question (#SIZE(5), #DEPTH(32));//dealing with 80 characters 5 bits wide; //ram of 80 by 5
    simple_ram sos (#SIZE(5), #DEPTH(32));//dealing with 80 characters 5 bits wide; //ram of 80 by 5
    
    //dff entry_count[$clog(32)]; //dealing with 80 characters per input string
    dff count[5]; //dealing with 80 characters per input string
    //dff occupied [1];
    .rst(rst){

      //fsm game = {IDLE, INPUT1,READ};
      fsm state = {IDLE, WRITE, DISPLAY};
      input_capture detect; //captures and maps input to data[5]
      displaymorse dm;
      settings settings;
      
    }

  }

  const SOS = {5h12, 5he, 5h12};
    
  always {
      ////////////////////
      // INITIALIZATIONS//
      ////////////////////
  
      reset_cond.in = ~rst_n; // input raw inverted reset signal
      rst = reset_cond.out;   // conditioned reset
  
      ////////////// turn LEDs off
      led = 8h00;
      red_led = 0;
      enter_led = 2b11;      //RGB led off is 1
      guess_led = 2b11;      //RGB led off is 1
  
      ////////////// Unused
      spi_miso = bz;          // not using SPI
      spi_channel = bzzzz;    // not using flags
      avr_rx = bz;            // not using serial port
  
      ////////////// Others
      gnd = 0;
      pwr = 1;
      //////////////component
      //ram
      //question.address = entry_count.q; // use entry_count as the RAM entry address
      //question.write_data = 5hxx;      // don't care
      //question.write_en = 0;
      //input_cature
      button_col = detect.button_col;
      detect.button_row = button_row;
    
      //settings
      settings.button = button;
      
      //displaymorse
      //question.address = dm.ra;
      dm.data = sos.read_data;
      dm.incr = settings.increment;
      dm.play = 0;
      
    //sos ram
    sos.address = count.q;
    sos.write_data = 5hx;
    sos.write_en = 0;
    
    count.d=0;
    
    case(state.q){
    
      state.IDLE:
      
        count.d=0;
        if (button[0] ==1){     //when pressed, go to write state
          state.d = state.WRITE;
        }
        if (button[1] ==1){    // when pressed, go to display state
          state.d = state.DISPLAY;
        }
        
      state.WRITE:
      
        sos.write_data=SOS[count.q];
        sos.write_en=1;
        count.d = count.q+1;
        
        if (count.q == 4){
          state.d = state.IDLE;
        }
        
      state.DISPLAY:
      
        if (dm.ra <= 3){
          
          dm.play = 1;      //dm will go to play state
          sos.address = dm.ra; //read from ram {5h12, 5he, 5h12}, when ra = 4, this block won't be executed
          dm.data = sos.read_data; //dm.data valid input should cause led to blink at correct intervals
          
        } else { //ra = 4, dm.play=0 will reset dm.ra, which will cause if block to be executed again
        
          dm.play = 0;
        
          
        
        
    
    
    /*
      case(game.q){
      game.DISPLAY:
      
        
        
    
      game.IDLE:
        if(button[0] ==1){
          question.write_en = 1;
          entry_count.d = 0;
          occupied.d = 0;
          enter_led[0] = 0;                 //indicate write mode
          game.d = game.INPUT1;
          }
      game.INPUT1:
          if(detect.somechar!=5h1F && occupied.q == 0){
            question.write_data = detect.somechar; //connects write port to data from input captures
            occupied.d = 1;
          }
          else if(detect.somechar == 5h1F && occupied.q ==1){
            entry_count.d = entry_count.q+1;
            occupied.d = 0;   
          }
          if(entry_count.q == 2){         //check if the write address pointer is moving
            guess_led[1] = 0;
          }
          if(button[1] ==1){
            question.write_en = 0;
            entry_count.d = 0;
            enter_led[0] = 1;               //indicate read-only
            game.d = game.READ;
          }
       game.READ:
          if(question.read_data == 5h01){
            red_led = 1;                    // check data in address 0
          }
          else 
            red_led = 0;
          }
          if(button[0] ==1){
            game.d = game.IDLE;
          }
      */

      
      
      }
      
  }
    
}
}