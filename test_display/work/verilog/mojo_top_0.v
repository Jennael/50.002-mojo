/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input [4:0] button,
    output reg red_led,
    output reg [1:0] enter_led,
    output reg [1:0] guess_led,
    output reg [5:0] button_col,
    input [4:0] button_row,
    output reg gnd,
    output reg pwr
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [5-1:0] M_sos_read_data;
  reg [5-1:0] M_sos_address;
  reg [5-1:0] M_sos_write_data;
  reg [1-1:0] M_sos_write_en;
  simple_ram_2 #(.SIZE(3'h5), .DEPTH(6'h20)) sos (
    .clk(clk),
    .address(M_sos_address),
    .write_data(M_sos_write_data),
    .write_en(M_sos_write_en),
    .read_data(M_sos_read_data)
  );
  reg [4:0] M_count_d, M_count_q = 1'h0;
  localparam IDLE_state = 2'd0;
  localparam WRITE_state = 2'd1;
  localparam DISPLAY_state = 2'd2;
  
  reg [1:0] M_state_d, M_state_q = IDLE_state;
  wire [6-1:0] M_detect_button_col;
  wire [5-1:0] M_detect_somechar;
  reg [5-1:0] M_detect_button_row;
  input_capture_3 detect (
    .clk(clk),
    .rst(rst),
    .button_row(M_detect_button_row),
    .button_col(M_detect_button_col),
    .somechar(M_detect_somechar)
  );
  wire [1-1:0] M_dm_red_led;
  wire [5-1:0] M_dm_ra;
  reg [5-1:0] M_dm_data;
  reg [1-1:0] M_dm_play;
  reg [26-1:0] M_dm_incr;
  displaymorse_4 dm (
    .clk(clk),
    .rst(rst),
    .data(M_dm_data),
    .play(M_dm_play),
    .incr(M_dm_incr),
    .red_led(M_dm_red_led),
    .ra(M_dm_ra)
  );
  wire [4-1:0] M_settings_speed_disp;
  wire [4-1:0] M_settings_length_disp;
  wire [1-1:0] M_settings_start;
  wire [26-1:0] M_settings_increment;
  reg [5-1:0] M_settings_button;
  settings_5 settings (
    .clk(clk),
    .rst(rst),
    .button(M_settings_button),
    .speed_disp(M_settings_speed_disp),
    .length_disp(M_settings_length_disp),
    .start(M_settings_start),
    .increment(M_settings_increment)
  );
  
  localparam SOS = 15'h49d2;
  
  always @* begin
    M_state_d = M_state_q;
    M_count_d = M_count_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    red_led = 1'h0;
    enter_led = 2'h3;
    guess_led = 2'h3;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    gnd = 1'h0;
    pwr = 1'h1;
    button_col = M_detect_button_col;
    M_detect_button_row = button_row;
    M_settings_button = button;
    M_dm_data = M_sos_read_data;
    M_dm_incr = M_settings_increment;
    M_dm_play = 1'h0;
    M_sos_address = M_count_q;
    M_sos_write_data = 5'bxxxxx;
    M_sos_write_en = 1'h0;
    M_count_d = 1'h0;
    
    case (M_state_q)
      IDLE_state: begin
        M_count_d = 1'h0;
        if (button[0+0-:1] == 1'h1) begin
          M_state_d = WRITE_state;
        end
        if (button[1+0-:1] == 1'h0) begin
          M_state_d = DISPLAY_state;
        end
      end
      WRITE_state: begin
        M_sos_write_data = SOS[(M_count_q)*5+4-:5];
        M_sos_write_en = 1'h1;
        M_count_d = M_count_q + 1'h1;
        if (M_count_q == 3'h4) begin
          M_state_d = IDLE_state;
        end
      end
      DISPLAY_state: begin
        if (M_dm_ra <= 2'h3) begin
          M_dm_play = 1'h1;
          M_sos_address = M_dm_ra;
          M_dm_data = M_sos_read_data;
        end else begin
          M_dm_play = 1'h0;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_count_q <= M_count_d;
    
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
