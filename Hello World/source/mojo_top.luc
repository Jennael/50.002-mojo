module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy       // AVR RX buffer full
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst){
      // the avr_interface module is used to talk to the AVR for access to the USB port and analog pins
      avr_interface avr;
      
      greeter greeter; // instance of our greeter
    }  
  }
  
  
  
  always {
  
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    // connect inputs of avr
    avr.cclk = cclk;
    avr.spi_ss = spi_ss;
    avr.spi_mosi = spi_mosi;
    avr.spi_sck = spi_sck;
    avr.rx = avr_tx; // FPGA receiver connected to avr transmitter
    avr.channel = hf; // ADC is unused so disable
    avr.tx_block = avr_rx_busy; // block TX when AVR is avr_rx_busy
    
    // connect outputs of avr
    spi_miso = avr.spi_miso;
    spi_channel = avr.spi_channel;
    avr_rx = avr.tx; // avr receiver connected to FPGA transmitter
    
    // Receiving Data
    // avr.new_rx_data is a single bit wide and acts as a flag. 
    // When this signal is 1, the value of avr.rx_data is valid and it's the byte we just received.
    
    // Transmitting Data
    // The signals avr.new_tx_data and avr.tx_data are exactly the same as their rx counterparts, 
    // except this time they are inputs to the transmitter, so we generate the values.
    // avr.tx_busy will be high when the transmitter is busy. When it is busy, 
    // any new data will be ignored. That means we must ensure that this signal is low 
    // before we attempt to send any data if we want to ensure we don't drop any bytes.
    
    greeter.new_rx = avr.new_rx_data;
    greeter.rx_data = avr.rx_data;
    avr.new_tx_data = greeter.new_tx;
    avr.tx_data = greeter.tx_data;
    greeter.tx_busy = avr.tx_busy;
    // connect greeter signals to corresponding avr signals
    
    led = 8h00;             // turn LEDs off
  }
}